import groovy.json.JsonOutput
import groovy.json.JsonSlurper

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '4.0.4'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${project.version}-${project.mcVersion}"
group = 'coffeecatrailway.' + project.modId
archivesBaseName = project.modId

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: project.mappingsChannel.toString(), version: project.mappingsVersion.toString()

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                hamncheese {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                hamncheese {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'

            args '--mod', '' + project.modId, '--all', '--output', '"' + rootProject.file('src/generated/resources/') + '"', '--existing', '"' + rootProject.file('src/main/resources') + '"'

            mods {
                hamncheese {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
    shade
}

repositories {
    jcenter()
    mavenLocal()

    maven { // JustEnoughItems
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven { // JustEnoughItems fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven { // Top
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven { // BOP
        url = "https://cursemaven.com"
    }
    maven { // Sonar
        name = "Jitpack"
        url = "https://jitpack.io"
    }
}

sourceSets.main.resources {
    srcDir "src/generated/resources"
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.mcVersion}-${project.forgeVersion}"

    runtimeOnly fg.deobf("mezz.jei:jei-${project.jeiVersion}")
    compileOnly fg.deobf("mezz.jei:jei-${project.jeiVersion}:api")

    compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${project.topVersion}:api")
    runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${project.topVersion}")

    implementation fg.deobf("curse.maven:biomes-o-plenty-220318:${project.bopVersion}")

//    runtimeOnly "curse.maven:configured-457570:3340535"
//    runtimeOnly "curse.maven:catalogue-459701:3335979"

    runtimeOnly fg.deobf("com.github.Ocelot5836:Sonar:${project.sonar}")
    compileOnly "com.github.Ocelot5836:Sonar:${project.sonar}:api"
    shade "com.github.Ocelot5836:Sonar:${project.sonar}"
}

shadowJar {
    configurations = [project.configurations.shade]
    relocate 'io.github.ocelot', 'io.github.ocelot.lib'

    exclude(["**/*.ase", "**/*.bbmodel", "**/assets/biomesoplenty"])
}

processResources {
    inputs.property("modId", project.modId)
    inputs.property("version", project.version)
    inputs.property("name", project.name)
    inputs.property("author", project.author)
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'modId': project.modId, 'version': project.version, 'name': project.name, 'author': project.author
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }

    // Minify json resources
    doLast {
        fileTree(dir: outputs.files.asPath, include: "**/*.json").each {
            File file -> file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
        }
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${archivesBaseName}",
                "Specification-Vendor"    : "${project.author}",
                "Specification-Version"   : "${project.version}",
                "Implementation-Title"    : "${project.name}",
                "Implementation-Version"  : "${project.version}",
                "Implementation-Vendor"   : "${project.author}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    enabled = false
    dependsOn(shadowJar { classifier = null })
}

jar.finalizedBy('reobfJar')
