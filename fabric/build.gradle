import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

archivesBaseName = "${rootProject.archivesBaseName}-${project.name}"

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath.set(project(":common").file("src/main/resources/${project.modId}.accesswidener"))

    runConfigs.configureEach {
        if (name == "client")
            runDir = "../run"
        else if (name == "server")
            runDir = "../run/server-fabric"
    }

    runs {
        datagen {
            client()

            name "Minecraft Data"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${project(":forge").file("src/generated/resources/").absolutePath}"
            vmArg "-Dfabric-api.datagen.modid=${project.modId}"
//            property "ExistingData", project(":common").file("src/main/resources/").absolutePath

//            ideConfigGenerated = true
//            runDir "build/datagen"
//            source sourceSets.main
        }
    }

    mixin {
        defaultRefmapName = "${project.modId}-refmap.json"
    }
}
//assemble.dependsOn runDatagen

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}


repositories {
    maven { // ModMenu
        name = "TerraformersMC"
        url "https://maven.terraformersmc.com/"
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabricLoaderVersion}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabricApiVersion}"
    modApi("gg.moonflower:pollen-fabric:${rootProject.pollenVersion}") { transitive = false }

    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${rootProject.reiVersion}"
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${rootProject.reiVersion}"
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${rootProject.reiVersion}"
    modRuntimeOnly "com.terraformersmc:modmenu:${rootProject.modMenuVersion}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "id", rootProject.modId
    inputs.property "name", rootProject.modName
    inputs.property "version", rootProject.modVersion
    inputs.property "repo", rootProject.name

    filesMatching("fabric.mod.json") {
        expand "id": rootProject.modId,
                "name": rootProject.modName,
                "version": rootProject.modVersion,
                "repo": rootProject.name
    }

    doLast {
        fileTree(dir: outputs.files.asPath, include: "**/*.json").each {
            File file -> file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
        }
    }
}

shadowJar {
    exclude "archiectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = project.archivesBaseName
            from components.java
        }
    }
}